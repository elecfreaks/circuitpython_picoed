# SPDX-FileCopyrightText: Copyright ELECFREAKS
# SPDX-License-Identifier: MIT

"""
`picoed.display`
====================================================

CircuitPython driver for the Pico:ed matrix display.

"""

try:
    from adafruit_is31fl3731 import IS31FL3731
except:
    raise ImportError("no module named 'adafruit_is31fl3731'. see: https://github.com/adafruit/Adafruit_CircuitPython_IS31FL3731.git")

_BITMAP = (
    bytes((0x00, 0x00, 0x00, 0x00, 0x00)),
    bytes((0x00, 0x00, 0x5f, 0x00, 0x00)),
    bytes((0x00, 0x07, 0x00, 0x07, 0x00)),
    bytes((0x14, 0x7f, 0x14, 0x7f, 0x14)),
    bytes((0x24, 0x2a, 0x7f, 0x2a, 0x12)),
    bytes((0x23, 0x13, 0x08, 0x64, 0x62)),
    bytes((0x36, 0x49, 0x55, 0x22, 0x50)),
    bytes((0x00, 0x05, 0x03, 0x00, 0x00)),
    bytes((0x00, 0x1c, 0x22, 0x41, 0x00)),
    bytes((0x00, 0x41, 0x22, 0x1c, 0x00)),
    bytes((0x08, 0x2a, 0x1c, 0x2a, 0x08)),
    bytes((0x08, 0x08, 0x3e, 0x08, 0x08)),
    bytes((0x00, 0x50, 0x30, 0x00, 0x00)),
    bytes((0x08, 0x08, 0x08, 0x08, 0x08)),
    bytes((0x00, 0x60, 0x60, 0x00, 0x00)),
    bytes((0x20, 0x10, 0x08, 0x04, 0x02)),
    bytes((0x3e, 0x51, 0x49, 0x45, 0x3e)),
    bytes((0x00, 0x42, 0x7f, 0x40, 0x00)),
    bytes((0x42, 0x61, 0x51, 0x49, 0x46)),
    bytes((0x21, 0x41, 0x45, 0x4b, 0x31)),
    bytes((0x18, 0x14, 0x12, 0x7f, 0x10)),
    bytes((0x27, 0x45, 0x45, 0x45, 0x39)),
    bytes((0x3c, 0x4a, 0x49, 0x49, 0x30)),
    bytes((0x01, 0x71, 0x09, 0x05, 0x03)),
    bytes((0x36, 0x49, 0x49, 0x49, 0x36)),
    bytes((0x06, 0x49, 0x49, 0x29, 0x1e)),
    bytes((0x00, 0x36, 0x36, 0x00, 0x00)),
    bytes((0x00, 0x56, 0x36, 0x00, 0x00)),
    bytes((0x00, 0x08, 0x14, 0x22, 0x41)),
    bytes((0x14, 0x14, 0x14, 0x14, 0x14)),
    bytes((0x41, 0x22, 0x14, 0x08, 0x00)),
    bytes((0x02, 0x01, 0x51, 0x09, 0x06)),
    bytes((0x32, 0x49, 0x79, 0x41, 0x3e)),
    bytes((0x7e, 0x11, 0x11, 0x11, 0x7e)),
    bytes((0x7f, 0x49, 0x49, 0x49, 0x36)),
    bytes((0x3e, 0x41, 0x41, 0x41, 0x22)),
    bytes((0x7f, 0x41, 0x41, 0x22, 0x1c)),
    bytes((0x7f, 0x49, 0x49, 0x49, 0x41)),
    bytes((0x7f, 0x09, 0x09, 0x01, 0x01)),
    bytes((0x3e, 0x41, 0x41, 0x51, 0x32)),
    bytes((0x7f, 0x08, 0x08, 0x08, 0x7f)),
    bytes((0x00, 0x41, 0x7f, 0x41, 0x00)),
    bytes((0x20, 0x40, 0x41, 0x3f, 0x01)),
    bytes((0x7f, 0x08, 0x14, 0x22, 0x41)),
    bytes((0x7f, 0x40, 0x40, 0x40, 0x40)),
    bytes((0x7f, 0x02, 0x04, 0x02, 0x7f)),
    bytes((0x7f, 0x04, 0x08, 0x10, 0x7f)),
    bytes((0x3e, 0x41, 0x41, 0x41, 0x3e)),
    bytes((0x7f, 0x09, 0x09, 0x09, 0x06)),
    bytes((0x3e, 0x41, 0x51, 0x21, 0x5e)),
    bytes((0x7f, 0x09, 0x19, 0x29, 0x46)),
    bytes((0x46, 0x49, 0x49, 0x49, 0x31)),
    bytes((0x01, 0x01, 0x7f, 0x01, 0x01)),
    bytes((0x3f, 0x40, 0x40, 0x40, 0x3f)),
    bytes((0x1f, 0x20, 0x40, 0x20, 0x1f)),
    bytes((0x7f, 0x20, 0x18, 0x20, 0x7f)),
    bytes((0x63, 0x14, 0x08, 0x14, 0x63)),
    bytes((0x03, 0x04, 0x78, 0x04, 0x03)),
    bytes((0x61, 0x51, 0x49, 0x45, 0x43)),
    bytes((0x00, 0x00, 0x7f, 0x41, 0x41)),
    bytes((0x02, 0x04, 0x08, 0x10, 0x20)),
    bytes((0x41, 0x41, 0x7f, 0x00, 0x00)),
    bytes((0x04, 0x02, 0x01, 0x02, 0x04)),
    bytes((0x40, 0x40, 0x40, 0x40, 0x40)),
    bytes((0x00, 0x01, 0x02, 0x04, 0x00)),
    bytes((0x20, 0x54, 0x54, 0x54, 0x78)),
    bytes((0x7f, 0x48, 0x44, 0x44, 0x38)),
    bytes((0x38, 0x44, 0x44, 0x44, 0x20)),
    bytes((0x38, 0x44, 0x44, 0x48, 0x7f)),
    bytes((0x38, 0x54, 0x54, 0x54, 0x18)),
    bytes((0x08, 0x7e, 0x09, 0x01, 0x02)),
    bytes((0x08, 0x14, 0x54, 0x54, 0x3c)),
    bytes((0x7f, 0x08, 0x04, 0x04, 0x78)),
    bytes((0x00, 0x44, 0x7d, 0x40, 0x00)),
    bytes((0x20, 0x40, 0x44, 0x3d, 0x00)),
    bytes((0x00, 0x7f, 0x10, 0x28, 0x44)),
    bytes((0x00, 0x41, 0x7f, 0x40, 0x00)),
    bytes((0x7c, 0x04, 0x18, 0x04, 0x78)),
    bytes((0x7c, 0x08, 0x04, 0x04, 0x78)),
    bytes((0x38, 0x44, 0x44, 0x44, 0x38)),
    bytes((0x7c, 0x14, 0x14, 0x14, 0x08)),
    bytes((0x08, 0x14, 0x14, 0x18, 0x7c)),
    bytes((0x7c, 0x08, 0x04, 0x04, 0x08)),
    bytes((0x48, 0x54, 0x54, 0x54, 0x20)),
    bytes((0x04, 0x3f, 0x44, 0x40, 0x20)),
    bytes((0x3c, 0x40, 0x40, 0x20, 0x7c)),
    bytes((0x1c, 0x20, 0x40, 0x20, 0x1c)),
    bytes((0x3c, 0x40, 0x30, 0x40, 0x3c)),
    bytes((0x44, 0x28, 0x10, 0x28, 0x44)),
    bytes((0x0c, 0x50, 0x50, 0x50, 0x3c)),
    bytes((0x44, 0x64, 0x54, 0x4c, 0x44)),
    bytes((0x00, 0x08, 0x36, 0x41, 0x00)),
    bytes((0x00, 0x00, 0x7f, 0x00, 0x00)),
    bytes((0x00, 0x41, 0x36, 0x08, 0x00)),
    bytes((0x18, 0x04, 0x18, 0x20, 0x18)),
)

class Image():
    No = [[5, 0], [5, 6], [6, 1], [6, 5], [7, 2], [7, 4], [8, 3], [9, 2], [9, 4], [10, 1], [10, 5], [11, 0], [11, 6]]
    Square = [[6, 1], [6, 2], [6, 3], [6, 4], [6, 5], [7, 1], [7, 5], [8, 1], [8, 5], [9, 1], [9, 5], [10, 1], [10, 2], [10, 3], [10, 4], [10, 5]]
    Rectangle = [[0, 0], [1, 0], [2, 0], [3, 0], [4, 0], [5, 0], [6, 0], [7, 0], [8, 0], [9, 0], [10, 0], [11, 0], [12, 0], [13, 0], [14, 0], [15, 0],
                [16, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [16, 1], [16, 2], [16, 3], [16, 4], [16, 5], [0, 6], [1, 6], [2, 6], [3, 6], [4, 6],
                [5, 6], [6, 6], [7, 6], [8, 6], [9, 6], [10, 6], [11, 6], [12, 6], [13, 6], [14, 6], [15, 6], [16, 6]]
    Rhombus = [[5, 3], [6, 2], [6, 4], [7, 1], [7, 5], [8, 0], [8, 6], [9, 1], [9, 5], [10, 2], [10, 4], [11, 3]]
    Target = [[5, 3], [6, 2], [6, 3], [6, 4], [7, 1], [7, 2], [7, 4], [7, 5], [8, 0], [8, 1], [8, 5], [8, 6], [9, 1], [9, 2], [9, 4], [9, 5], [10, 2],
             [10, 3], [10, 4], [11, 3]]
    Chessboard = [[0, 1], [0, 3], [0, 5], [1, 0], [1, 2], [1, 4], [1, 6], [2, 1], [2, 3], [2, 5], [3, 0], [3, 2], [3, 4], [3, 6], [4, 1], [4, 3],
                  [4, 5], [5, 0], [5, 2], [5, 4], [5, 6], [6, 1], [6, 3], [6, 5], [7, 0], [7, 2], [7, 4], [7, 6], [8, 1], [8, 3], [8, 5], [9, 0],
                  [9, 2], [9, 4], [9, 6], [10, 1], [10, 3], [10, 5], [11, 0], [11, 2], [11, 4], [11, 6], [12, 1], [12, 3], [12, 5], [13, 0], [13, 2],
                  [13, 4], [13, 6], [14, 1], [14, 3], [14, 5], [15, 0], [15, 2], [15, 4], [15, 6], [16, 1], [16, 3], [16, 5]]
    Happy = [[4, 4], [5, 5], [6, 1], [6, 2], [6, 6], [7, 6], [8, 6], [9, 6], [10, 1], [10, 2], [10, 6], [11, 5], [12, 4]]
    Sad = [[4, 6], [5, 1], [5, 5], [6, 1], [6, 4], [7, 4], [8, 4], [9, 4], [10, 1], [10, 4], [11, 1], [11, 5], [12, 6]]
    Yes = [[6, 3], [7, 4], [8, 5], [9, 4], [10, 3], [11, 2], [12, 1]]
    Heart = [[5, 1], [5, 2], [5, 3], [6, 0], [6, 1], [6, 2], [6, 3], [6, 4], [7, 0], [7, 1], [7, 2], [7, 3], [7, 4], [7, 5], [8, 1], [8, 2], [8, 3],
             [8, 4], [8, 5], [8, 6], [9, 0], [9, 1], [9, 2], [9, 3], [9, 4], [9, 5], [10, 0], [10, 1], [10, 2], [10, 3], [10, 4], [11, 1], [11, 2],
             [11, 3]]
    Triangle = [[0, 6], [1, 6], [2, 6], [3, 6], [4, 6], [5, 6], [6, 6], [7, 6], [8, 6], [9, 6], [10, 6], [11, 6], [12, 6], [13, 6], [14, 6], [15, 6],
                [16, 6], [3, 5], [13, 5], [4, 4], [12, 4], [5, 3], [11, 3], [6, 2], [10, 2], [7, 1], [9, 1], [8, 0]]


class Display(IS31FL3731):
    """Supports the Pico:ed display by ELECFREAKS"""

    width = 17
    height = 7

    _current_frame = 0

    @staticmethod
    def pixel_addr(x, y):
        """Translate an x,y coordinate to a pixel index."""
        if x > 8:
            x = 17 - x
            y += 8
        else:
            y = 7 - y
        return x * 16 + y

    def _draw(self, buffer, brightness):
        self._current_frame = 0 if self._current_frame else 1
        self.frame(self._current_frame, show=False)
        self.fill(0)
        for x in range(self.width):
            col = buffer[x]
            for y in range(self.height):
                bit = 1 << y & col
                if bit:
                    self.pixel(x, y, brightness)
        self.frame(self._current_frame, show=True)

    def clear(self):
        self.fill(0)

    def scroll(self, value, brightness = 30):
        if brightness < 0:
            brightness = 0
        if brightness > 255:
            brightness = 255

        buf = bytearray(self.width)
        text = str(value)

        if len(text) == 1:
            text += '  '
        elif len(text) == 2:
            text += ' '
        elif len(text) != 3:
            text += '   '

        if len(text) == 3:
            for bufIndex in range(len(buf)):
                font = bytearray(_BITMAP[ord(text[bufIndex // 6]) - 32])
                font.append(0)
                buf[bufIndex] = font[bufIndex % 6]
            self._draw(buf, brightness)
        else:
            for textIndex in range(len(text) * 6):
                for bufIndex in range(len(buf) - 1):
                    buf[bufIndex] = buf[bufIndex + 1]
                font = bytearray(_BITMAP[ord(text[textIndex // 6]) - 32])
                font.append(0)
                buf[len(buf) - 1] = font[textIndex % 6]
                self._draw(buf, brightness)

    def show(self, value: Image, brightness=30):
        self.clear()
        if type(value) == int or type(value) == str:
            self.scroll(value, brightness)
        else:
            for pixel in value:
                self.pixel(pixel[0], pixel[1], brightness)

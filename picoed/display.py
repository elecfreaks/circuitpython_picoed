# SPDX-FileCopyrightText: Copyright ELECFREAKS
# SPDX-License-Identifier: MIT

"""
`picoed.display`
====================================================

CircuitPython driver for the Pico:ed matrix display.

"""

try:
    from adafruit_is31fl3731 import IS31FL3731
except:
    raise ImportError("no module named 'adafruit_is31fl3731'. see: https://github.com/adafruit/Adafruit_CircuitPython_IS31FL3731.git")

_BITMAP = (
    (0x00, 0x00, 0x00, 0x00, 0x00),
    (0x00, 0x00, 0x5f, 0x00, 0x00),
    (0x00, 0x07, 0x00, 0x07, 0x00),
    (0x14, 0x7f, 0x14, 0x7f, 0x14),
    (0x24, 0x2a, 0x7f, 0x2a, 0x12),
    (0x23, 0x13, 0x08, 0x64, 0x62),
    (0x36, 0x49, 0x55, 0x22, 0x50),
    (0x00, 0x05, 0x03, 0x00, 0x00),
    (0x00, 0x1c, 0x22, 0x41, 0x00),
    (0x00, 0x41, 0x22, 0x1c, 0x00),
    (0x08, 0x2a, 0x1c, 0x2a, 0x08),
    (0x08, 0x08, 0x3e, 0x08, 0x08),
    (0x00, 0x50, 0x30, 0x00, 0x00),
    (0x08, 0x08, 0x08, 0x08, 0x08),
    (0x00, 0x60, 0x60, 0x00, 0x00),
    (0x20, 0x10, 0x08, 0x04, 0x02),
    (0x3e, 0x51, 0x49, 0x45, 0x3e),
    (0x00, 0x42, 0x7f, 0x40, 0x00),
    (0x42, 0x61, 0x51, 0x49, 0x46),
    (0x21, 0x41, 0x45, 0x4b, 0x31),
    (0x18, 0x14, 0x12, 0x7f, 0x10),
    (0x27, 0x45, 0x45, 0x45, 0x39),
    (0x3c, 0x4a, 0x49, 0x49, 0x30),
    (0x01, 0x71, 0x09, 0x05, 0x03),
    (0x36, 0x49, 0x49, 0x49, 0x36),
    (0x06, 0x49, 0x49, 0x29, 0x1e),
    (0x00, 0x36, 0x36, 0x00, 0x00),
    (0x00, 0x56, 0x36, 0x00, 0x00),
    (0x00, 0x08, 0x14, 0x22, 0x41),
    (0x14, 0x14, 0x14, 0x14, 0x14),
    (0x41, 0x22, 0x14, 0x08, 0x00),
    (0x02, 0x01, 0x51, 0x09, 0x06),
    (0x32, 0x49, 0x79, 0x41, 0x3e),
    (0x7e, 0x11, 0x11, 0x11, 0x7e),
    (0x7f, 0x49, 0x49, 0x49, 0x36),
    (0x3e, 0x41, 0x41, 0x41, 0x22),
    (0x7f, 0x41, 0x41, 0x22, 0x1c),
    (0x7f, 0x49, 0x49, 0x49, 0x41),
    (0x7f, 0x09, 0x09, 0x01, 0x01),
    (0x3e, 0x41, 0x41, 0x51, 0x32),
    (0x7f, 0x08, 0x08, 0x08, 0x7f),
    (0x00, 0x41, 0x7f, 0x41, 0x00),
    (0x20, 0x40, 0x41, 0x3f, 0x01),
    (0x7f, 0x08, 0x14, 0x22, 0x41),
    (0x7f, 0x40, 0x40, 0x40, 0x40),
    (0x7f, 0x02, 0x04, 0x02, 0x7f),
    (0x7f, 0x04, 0x08, 0x10, 0x7f),
    (0x3e, 0x41, 0x41, 0x41, 0x3e),
    (0x7f, 0x09, 0x09, 0x09, 0x06),
    (0x3e, 0x41, 0x51, 0x21, 0x5e),
    (0x7f, 0x09, 0x19, 0x29, 0x46),
    (0x46, 0x49, 0x49, 0x49, 0x31),
    (0x01, 0x01, 0x7f, 0x01, 0x01),
    (0x3f, 0x40, 0x40, 0x40, 0x3f),
    (0x1f, 0x20, 0x40, 0x20, 0x1f),
    (0x7f, 0x20, 0x18, 0x20, 0x7f),
    (0x63, 0x14, 0x08, 0x14, 0x63),
    (0x03, 0x04, 0x78, 0x04, 0x03),
    (0x61, 0x51, 0x49, 0x45, 0x43),
    (0x00, 0x00, 0x7f, 0x41, 0x41),
    (0x02, 0x04, 0x08, 0x10, 0x20),
    (0x41, 0x41, 0x7f, 0x00, 0x00),
    (0x04, 0x02, 0x01, 0x02, 0x04),
    (0x40, 0x40, 0x40, 0x40, 0x40),
    (0x00, 0x01, 0x02, 0x04, 0x00),
    (0x20, 0x54, 0x54, 0x54, 0x78),
    (0x7f, 0x48, 0x44, 0x44, 0x38),
    (0x38, 0x44, 0x44, 0x44, 0x20),
    (0x38, 0x44, 0x44, 0x48, 0x7f),
    (0x38, 0x54, 0x54, 0x54, 0x18),
    (0x08, 0x7e, 0x09, 0x01, 0x02),
    (0x08, 0x14, 0x54, 0x54, 0x3c),
    (0x7f, 0x08, 0x04, 0x04, 0x78),
    (0x00, 0x44, 0x7d, 0x40, 0x00),
    (0x20, 0x40, 0x44, 0x3d, 0x00),
    (0x00, 0x7f, 0x10, 0x28, 0x44),
    (0x00, 0x41, 0x7f, 0x40, 0x00),
    (0x7c, 0x04, 0x18, 0x04, 0x78),
    (0x7c, 0x08, 0x04, 0x04, 0x78),
    (0x38, 0x44, 0x44, 0x44, 0x38),
    (0x7c, 0x14, 0x14, 0x14, 0x08),
    (0x08, 0x14, 0x14, 0x18, 0x7c),
    (0x7c, 0x08, 0x04, 0x04, 0x08),
    (0x48, 0x54, 0x54, 0x54, 0x20),
    (0x04, 0x3f, 0x44, 0x40, 0x20),
    (0x3c, 0x40, 0x40, 0x20, 0x7c),
    (0x1c, 0x20, 0x40, 0x20, 0x1c),
    (0x3c, 0x40, 0x30, 0x40, 0x3c),
    (0x44, 0x28, 0x10, 0x28, 0x44),
    (0x0c, 0x50, 0x50, 0x50, 0x3c),
    (0x44, 0x64, 0x54, 0x4c, 0x44),
    (0x00, 0x08, 0x36, 0x41, 0x00),
    (0x00, 0x00, 0x7f, 0x00, 0x00),
    (0x00, 0x41, 0x36, 0x08, 0x00),
    (0x18, 0x04, 0x18, 0x20, 0x18),
)

class Display(IS31FL3731):
    """Supports the Pico:ed display by ELECFREAKS"""

    width = 17
    height = 7

    _current_frame = 0

    @staticmethod
    def pixel_addr(x, y):
        """Translate an x,y coordinate to a pixel index."""
        if x > 8:
            x = 17 - x
            y += 8
        else:
            y = 7 - y
        return x * 16 + y

    def _draw(self, buffer, brightness):
        self._current_frame = 0 if self._current_frame else 1
        self.frame(self._current_frame, show=False)
        self.fill(0)
        for x in range(self.width):
            col = buffer[x]
            for y in range(self.height):
                bit = 1 << y & col
                if bit:
                    self.pixel(x, y, brightness)
        self.frame(self._current_frame, show=True)

    def clear(self):
        self.fill(0)

    def scroll(self, value, brightness = 30):
        if brightness < 0:
            brightness = 0
        if brightness > 255:
            brightness = 255

        buf = bytearray(self.width)
        text = str(value)

        if len(text) == 1:
            text += '  '
        elif len(text) == 2:
            text += ' '
        elif len(text) != 3:
            text += '   '

        if len(text) == 3:
            for bufIndex in range(len(buf)):
                font = list(_BITMAP[ord(text[bufIndex // 6]) - 32])
                font.append(0)
                buf[bufIndex] = font[bufIndex % 6]
            self._draw(buf, brightness)
        else:
            for textIndex in range(len(text) * 6):
                for bufIndex in range(len(buf) - 1):
                    buf[bufIndex] = buf[bufIndex + 1]
                font = list(_BITMAP[ord(text[textIndex // 6]) - 32])
                font.append(0)
                buf[len(buf) - 1] = font[textIndex % 6]
                self._draw(buf, brightness)
